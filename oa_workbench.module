<?php

/**
 * @file
 * Code for the Open Atrium Workbench module.
 */

/**
 * Implements hook_block_info_alter().
 */
function oa_workbench_block_info_alter(&$blocks, $theme, $code_blocks) {
  if (isset($blocks['workbench']['block'])) {
    // Don't place it in a region by default. Workbench normally wants to place
    // this at the top of the 'content' region.
    $blocks['workbench']['block']['region'] = -1;
    $blocks['workbench']['block']['weight'] = 0;
  }
}

/**
 * Implements hook_node_view().
 *
 * Necessary in order to trigger the workbench_moderation_messages() because
 * workbench_moderation_node_view() only triggers it on $view_mode == 'full'
 * and we need it to trigger on $view_mode == 'page_manager'.
 *
 * @todo Remove once the patch from #1462724 is accepted upstream:
 *       https://drupal.org/node/1462724
 *
 * @see workbench_moderation_node_view()
 */
function oa_workbench_node_view($node, $view_mode = 'full') {
  // Show moderation state messages if we're on a node page.
  if (node_is_page($node) && $view_mode == 'page_manager' && empty($node->in_preview)) {
    workbench_moderation_messages('view', $node);
  }
}

/**
 * Implements hook_strongarm_alter().
 */
function oa_workbench_strongarm_alter(&$items) {
  if (isset($items['contextual_tabs_extract'])) {
    $items['contextual_tabs_extract']->value .= "\n" . implode("\n", array(
      "View published",
      "View draft",
      "New draft,icon-pencil",
      "Edit draft,icon-pencil",
    ));
  }
}

/**
 * Implements hook_og_permission().
 */
function oa_workbench_og_permission() {
  $perms = array();
  foreach (workbench_moderation_transitions() as $transition) {
    $from_state = $transition->from_name;
    $to_state = $transition->to_name;

    $perm = array(
      'title' => t('Moderate all content from %from_state to %to_state', array('%from_state' => workbench_moderation_state_label($from_state), '%to_state' => workbench_moderation_state_label($to_state))),
    );

    // By default, give all permissions to all members, except for the
    // 'published' state, which will go to group admins by default.
    if ($to_state == workbench_moderation_state_published()) {
      $perm['default role'] = array(OG_ADMINISTRATOR_ROLE);
    }
    else {
      $perm['default role'] = array(OG_AUTHENTICATED_ROLE, OG_ADMINISTRATOR_ROLE);
    }

    $perms["moderate content from $from_state to $to_state"] = $perm;
  }
  return $perms;
}

/**
 * Implements hook_workbench_moderation_states_next_alter().
 */
function oa_workbench_workbench_moderation_states_next_alter(&$states, $current_state, $context) {
  $account = $context['account'];
  $node = $context['node'];

  // Remove states that the user doesn't have permission to transition to.
  if ($states && !empty($node->nid) && og_is_group_content_type($node->type) && ($space = oa_core_group_from_node($node->nid))) {
    foreach ($states as $machine_name => $label) {
      if (!og_user_access('node', $space->nid, "moderate content from $current_state to $machine_name", $account)) {
        unset($states[$machine_name]);
      }
    }
  }
}

/**
 * Loops through a Panels display and gets a new pid.
 *
 * @param object $display
 *   A panels_display object.
 *
 * @return string
 *   A string representing a pid that is one higher than the last one, for
 *   example: "new-17" (if the highest existing is "new-16").
 */
function oa_workbench_get_new_pid($display) {
  // Get the pid that is one higher than the highest.
  $new_pid = 0;
  foreach (array_keys($display->content) as $key) {
    list ($temp, $pid) = explode('-', $key);
    $pid = (int)$pid;
    if ($pid > $new_pid) {
      $new_pid = $pid;
    }
  }
  $new_pid++;

  return 'new-' . $new_pid;
}

/**
 * Gets a Panels pane object representing the Workbench pane.
 *
 * @param string $pid
 *   The pid value to use for the new pane.
 *
 * @return object
 *   A Panels pane object.
 */
function oa_workbench_get_workbench_pane($pid) {
  $pane = new stdClass();
  $pane->pid = $pid;
  $pane->panel = 'sidebar';
  $pane->type = 'block';
  $pane->subtype = 'workbench-block';
  $pane->shown = TRUE;
  $pane->access = array();
  $pane->configuration = array(
    'override_title' => 0,
    'override_title_text' => '',
  );
  $pane->cache = array();
  $pane->style = array(
    'settings' => NULL,
  );
  $pane->css = array();
  $pane->extras = array();
  $pane->position = 0;
  $pane->locks = array();

  return $pane;
}

/**
 * Implements hook_default_page_manager_handlers_alter().
 */
function oa_workbench_default_page_manager_handlers_alter(&$handlers) {
  foreach ($handlers as &$handler) {
    if ($handler->task == 'node_edit') {
      $new_pid = oa_workbench_get_new_pid($handler->conf['display']);
      $pane = oa_workbench_get_workbench_pane($new_pid);

      // Add the workbench block to the top of the sidebar.
      $handler->conf['display']->content[$new_pid] = $pane;
      array_unshift($handler->conf['display']->panels['sidebar'], $new_pid);
    }
  }
}

/**
 * Implements hook_default_panels_mini_alter().
 */
function oa_workbench_default_panels_mini_alter(&$panels) {
  if (isset($panels['section_sidebar_top'])) {
    $new_pid = oa_workbench_get_new_pid($panels['section_sidebar_top']->display);
    $pane = oa_workbench_get_workbench_pane($new_pid);

    // Add the workbench block to the top of the sidebar mini-panel.
    $panels['section_sidebar_top']->display->content[$new_pid] = $pane;
    array_unshift($panels['section_sidebar_top']->display->panels['middle'], $new_pid);
  }
}
